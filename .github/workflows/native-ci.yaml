name: Native CI workflow

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - v*

jobs:

  build-melodic:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #[ubuntu-latest, self-hosted]
      fail-fast: false

    container:
      image: autoware/autoware:bleedingedge-melodic-base
      env:
        VCS_FILE: build_depends.repos
      options: --user 1001

    steps:

    - name: Checkout repo
      uses: actions/checkout@v2

    #- name: Setup ROS
    #  uses: ros-tooling/setup-ros@0.0.18
    #  with:
    #    required-ros-distributions: melodic

    - name: Prepare repo
      run: |
        mkdir -p src_tmp/$CI_PROJECT_NAME && mv `find -maxdepth 1 -not -name . -not -name src_tmp -not -name $VCS_FILE` src_tmp/$CI_PROJECT_NAME && mv src_tmp/ src/
        vcs validate < $VCS_FILE
        vcs import src/ < $VCS_FILE
        rosdep update
        rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO

    - name: Build and test repo
      run: |
        source /opt/ros/$ROS_DISTRO/setup.bash
    # We first build the entire workspace normally
        colcon build --cmake-args -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage" -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage" -DCMAKE_BUILD_TYPE=Debug
    # And then build the tests target. catkin (ROS1) packages add their tests to the tests target
    # which is not the standard target for CMake projects. We need to trigger the tests target so that
    # tests are built and any fixtures are set up.
        colcon build --cmake-target tests --cmake-args -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage" -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage" -DCMAKE_BUILD_TYPE=Debug
        lcov --initial --directory build --capture --output-file lcov.base
        colcon test
        colcon test-result --verbose
        lcov --directory build --capture --output-file lcov.test
        lcov -a lcov.base -a lcov.test -o lcov.total
        lcov -r lcov.total '*/tests/*' '*/test/*' '*/build/*' '*/devel/*' '*/install/*' '*/log/*' '/usr/*' '/opt/*' '/tmp/*' '*/CMakeCCompilerId.c' '*/CMakeCXXCompilerId.cpp' -o lcov.total.filtered
        genhtml -p "$PWD" --legend --demangle-cpp lcov.total.filtered -o coverage
        tar -czvf coverage.tar.gz coverage

    - name: Upload Logs
      uses: actions/upload-artifact@v1
      with:
        name: coverage.tar.gz
        path: autoware.ai/coverage.tar.gz
      if: always()
